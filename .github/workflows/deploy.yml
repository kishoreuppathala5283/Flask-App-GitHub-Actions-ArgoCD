name: CI/CD - Build, Push to ECR, and Deploy to EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 586636666108.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: flask-app
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout your repo
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3Ô∏è‚É£ Create ECR repo if missing
      - name: Create ECR repository (if not exists)
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

      # 4Ô∏è‚É£ Log in to ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      # 5Ô∏è‚É£ Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 6Ô∏è‚É£ Push Docker image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 7Ô∏è‚É£ Deploy on EC2
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}

            echo "üöÄ Starting EC2 deployment..."

            # Clone repo if missing
            if [ ! -d "/home/ubuntu/Flask-App-GitHub-Actions-ArgoCD" ]; then
              cd /home/ubuntu
              git clone https://github.com/kishoreuppathala5283/Flask-App-GitHub-Actions-ArgoCD.git
              cd Flask-App-GitHub-Actions-ArgoCD
              python3 -m venv venv
            else
              cd /home/ubuntu/Flask-App-GitHub-Actions-ArgoCD
            fi

            # Force sync with GitHub
            git fetch origin
            git reset --hard origin/main

            # Activate venv and install dependencies
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Docker deployment
            echo "Logging in to ECR..."
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "Stopping old container (if any)..."
            if [ "$(sudo docker ps -q -f name=flaskapp)" ]; then
              sudo docker stop flaskapp
              sudo docker rm flaskapp
            fi

            echo "Pulling latest image..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "‚úÖ Deployment completed successfully!"
