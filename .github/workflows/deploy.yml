name: CI/CD - Flask App to AWS ECR & EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Python (for linting/tests)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 3️⃣ Install dependencies and run linting
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8
          flake8 --ignore=E501,F401 .

      # 4️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # 🔁 change to your region

      # 5️⃣ Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6️⃣ Generate version tag
      - name: Set image version
        id: version
        run: |
          VERSION=v$(date +"%Y%m%d%H%M%S")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # 7️⃣ Build and push Docker image to ECR
      - name: Build & Push Docker Image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=flask-app
          IMAGE_TAG=${{ env.VERSION }}

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 8️⃣ Deploy to EC2 instance
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY=flask-app
            IMAGE_TAG=${{ env.VERSION }}

            echo "Deploying $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            # Authenticate Docker with ECR
            aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            # Stop and remove old container if it exists
            if [ "$(sudo docker ps -q -f name=flaskapp)" ]; then
              echo "Stopping old container..."
              sudo docker stop flaskapp
              sudo docker rm flaskapp
            fi

            # Pull the latest image
            echo "Pulling latest image..."
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # Run new container
            echo "Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            echo "✅ Deployment completed successfully!"
