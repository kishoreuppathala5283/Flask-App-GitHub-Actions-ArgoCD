name: CI/CD Pipeline - Build, Push & Deploy to EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: flask-app
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4Ô∏è‚É£ Build and push Docker image
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üèóÔ∏è Building Docker image..."
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          echo "üì§ Pushing image to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "‚úÖ Image pushed successfully!"

      # 5Ô∏è‚É£ Deploy to EC2
      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üöÄ Starting EC2 deployment..."

          # Connect to EC2 instance via SSH
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY_PATH }} ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            echo "üì¶ Updating system packages..."
            sudo apt-get update -y
            sudo apt-get install -y python3-venv docker.io unzip curl

            # ‚úÖ Install AWS CLI v2 (Ubuntu 24+ no longer supports 'apt install awscli')
            if ! command -v aws &> /dev/null; then
              echo "üì¶ Installing AWS CLI v2..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            fi

            echo "üîç Checking AWS CLI version..."
            aws --version

            # Clone or update repository
            if [ ! -d "/home/ubuntu/Flask-App-GitHub-Actions-ArgoCD" ]; then
              cd /home/ubuntu
              git clone https://github.com/kishoreuppathala5283/Flask-App-GitHub-Actions-ArgoCD.git
              cd Flask-App-GitHub-Actions-ArgoCD
            else
              cd /home/ubuntu/Flask-App-GitHub-Actions-ArgoCD
            fi

            echo "üîÑ Syncing with latest GitHub code..."
            git fetch origin
            git reset --hard origin/main

            echo "üêç Setting up Python virtual environment..."
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # --- Docker deployment ---
            echo "üîê Logging in to ECR..."
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "üõë Stopping old container (if any)..."
            if [ "$(sudo docker ps -q -f name=flaskapp)" ]; then
              sudo docker stop flaskapp
              sudo docker rm flaskapp
            fi

            echo "üì¶ Pulling latest image..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "üöÄ Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              --restart=always \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "üîç Checking Flask app health..."
            sleep 5
            if curl -s http://localhost:5000 > /dev/null; then
              echo "‚úÖ Flask app is running successfully!"
            else
              echo "‚ùå Flask app failed to start. Fetching logs..."
              sudo docker logs flaskapp || true
              exit 1
            fi

            echo "üéâ Deployment finished successfully!"
          EOF
