name: Deploy Flask App to EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 586636666108.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: flask-app
  IMAGE_TAG: latest  # or dynamically set via your build pipeline

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout source code
      - name: Checkout source
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Python (optional)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3Ô∏è‚É£ Install dependencies locally (optional sanity check)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4Ô∏è‚É£ Deploy to EC2 via SSH
      - name: Deploy to EC2 and run container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ EC2_HOST }}
          username: ubuntu
          key: ${{ EC2_SSH_KEY }}
          script: |
            set -e

            export AWS_ACCESS_KEY_ID=${{ EC2_AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ EC2_AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}

            echo "üöÄ Starting EC2 deployment..."

            # Clone repo if not present
            if [ ! -d "/home/ubuntu/Flask-App-GitHub-Actions-ArgoCD" ]; then
              cd /home/ubuntu
              git clone https://github.com/kishoreuppathala5283/Flask-App-GitHub-Actions-ArgoCD.git
              cd Flask-App-GitHub-Actions-ArgoCD
            else
              cd /home/ubuntu/Flask-App-GitHub-Actions-ArgoCD
              echo "Updating existing repo..."
              git fetch origin
              git reset --hard origin/main
            fi

            # Set up Python environment
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # --- Docker & ECR deployment ---
            echo "Logging in to ECR..."
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "Stopping old container (if any)..."
            if [ "$(sudo docker ps -q -f name=flaskapp)" ]; then
              sudo docker stop flaskapp
              sudo docker rm flaskapp
            fi

            echo "Pulling latest image from ECR..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "‚úÖ Deployment completed successfully!"
