name: üöÄ CI/CD ‚Äî Build, Push to ECR & Deploy to EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 586636666108.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: flask-app
  IMAGE_TAG: latest

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials (for ECR)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      # 4Ô∏è‚É£ Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }} .
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # 5Ô∏è‚É£ Deploy on EC2
      - name: Deploy on EC2 Instance
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "üöÄ Starting EC2 deployment..."

            # Update system and install required packages
            sudo apt-get update -y
            sudo apt-get install -y python3-venv awscli docker.io

            # Clone repo if missing
            if [ ! -d "/home/ubuntu/Flask-App-GitHub-Actions-ArgoCD" ]; then
              cd /home/ubuntu
              git clone https://github.com/kishoreuppathala5283/Flask-App-GitHub-Actions-ArgoCD.git
              cd Flask-App-GitHub-Actions-ArgoCD
            else
              cd /home/ubuntu/Flask-App-GitHub-Actions-ArgoCD
            fi

            # Force sync with latest GitHub code
            git fetch origin
            git reset --hard origin/main

            # Ensure Python venv setup
            echo "üêç Setting up Python environment..."
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Ensure Flask binds to 0.0.0.0
            echo "üîç Verifying Flask entrypoint..."
            if ! grep -q "host=" app.py; then
              echo "‚öôÔ∏è Adding host binding fix..."
              echo '' >> app.py
              echo 'if __name__ == "__main__":' >> app.py
              echo '    app.run(host="0.0.0.0", port=5000)' >> app.py
            fi

            # Docker deployment
            echo "üîê Logging in to ECR..."
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "üõë Stopping old container (if any)..."
            if [ "$(sudo docker ps -q -f name=flaskapp)" ]; then
              sudo docker stop flaskapp
              sudo docker rm flaskapp
            fi

            echo "üì¶ Pulling latest image..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "üöÄ Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              --restart=always \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "üîç Checking Flask app health..."
            sleep 5
            if curl -s http://localhost:5000 > /dev/null; then
              echo "‚úÖ Flask app is running successfully!"
            else
              echo "‚ùå Flask app failed to start. Fetching logs..."
              sudo docker logs flaskapp || true
              exit 1
            fi
