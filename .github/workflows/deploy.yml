name: Deploy Flask App to EC2

on:
  workflow_run:
    workflows: ["Build and Push to ECR"]
    types:
      - completed

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 586636666108.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: flask-app
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Deploy to EC2 and run container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            export AWS_ACCESS_KEY_ID=${{ secrets.EC2_AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.EC2_AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}

            echo "🚀 Starting EC2 deployment..."

            # === 1️⃣ Update or clone repo ===
            if [ ! -d "/home/ubuntu/Flask-App-GitHub-Actions-ArgoCD" ]; then
              cd /home/ubuntu
              git clone https://github.com/kishoreuppathala5283/Flask-App-GitHub-Actions-ArgoCD.git
              cd Flask-App-GitHub-Actions-ArgoCD
            else
              cd /home/ubuntu/Flask-App-GitHub-Actions-ArgoCD
              echo "🔄 Updating existing repo..."
              git fetch origin
              git reset --hard origin/main
            fi

            # === 2️⃣ Setup Python environment ===
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # === 3️⃣ Log in to ECR ===
            echo "🔐 Logging in to ECR..."
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            # === 4️⃣ Stop and remove old container ===
            echo "🛑 Stopping and cleaning old container (if any)..."
            sudo docker stop flaskapp || true
            sudo docker rm flaskapp || true

            # === 5️⃣ Remove old images to avoid caching issues ===
            echo "🧹 Cleaning up old Docker images..."
            sudo docker image prune -a -f || true

            # === 6️⃣ Pull latest image ===
            echo "📦 Pulling latest image from ECR..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            # === 7️⃣ Run new container ===
            echo "🚀 Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              --restart=always \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            # === 8️⃣ Health check ===
            echo "🔍 Checking Flask app health..."
            sleep 5
            if curl -s http://localhost:5000 > /dev/null; then
              echo "✅ Flask app deployed and running successfully!"
            else
              echo "❌ Flask app failed to start. Fetching logs..."
              sudo docker logs flaskapp || true
              exit 1
            fi

            echo "🎯 Deployment finished successfully!"
