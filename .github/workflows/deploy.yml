name: CI/CD Pipeline for Flask App (Build ‚Üí Push ‚Üí Deploy)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: flask-app
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üê≥ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build and push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: üöÄ Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üöÄ Starting EC2 deployment..."
          
          # ‚úÖ Save SSH private key to a file
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          echo "‚úÖ SSH key saved successfully."

          # ‚úÖ Connect to EC2 via SSH and deploy
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            echo "üîß Updating server..."
            sudo apt-get update -y
            sudo apt-get install -y python3-venv docker.io unzip curl

            # ‚úÖ Install AWS CLI if not already installed
            if ! command -v aws &> /dev/null; then
              echo "üì¶ Installing AWS CLI v2..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            fi

            echo "üêç Setting up Flask app..."
            if [ ! -d "/home/ubuntu/Flask-App-GitHub-Actions-ArgoCD" ]; then
              cd /home/ubuntu
              git clone https://github.com/kishoreuppathala5283/Flask-App-GitHub-Actions-ArgoCD.git
            fi

            cd /home/ubuntu/Flask-App-GitHub-Actions-ArgoCD
            git fetch origin
            git reset --hard origin/main

            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "üîê Logging in to ECR..."
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "üõë Stopping old container..."
            if [ "$(sudo docker ps -q -f name=flaskapp)" ]; then
              sudo docker stop flaskapp
              sudo docker rm flaskapp
            fi

            echo "üì¶ Pulling latest image..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "üöÄ Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              --restart=always \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "üîç Checking app health..."
            sleep 5
            if curl -s http://localhost:5000 > /dev/null; then
              echo "‚úÖ Flask app is running successfully!"
            else
              echo "‚ùå Flask app failed to start. Fetching logs..."
              sudo docker logs flaskapp || true
              exit 1
            fi
          EOF
