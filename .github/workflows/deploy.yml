name: CI/CD Pipeline - Flask App with AWS ECR + EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 586636666108.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: flask-app
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- AWS Credentials ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Docker Build & Push to ECR ---
      - name: Build, tag, and push Docker image to ECR
        run: |
          echo "üîß Logging in to ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

          echo "üê≥ Building Docker image..."
          docker build -t ${{ env.ECR_REPOSITORY }} .

          echo "üè∑Ô∏è Tagging image..."
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

          echo "üì§ Pushing image to ECR..."
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # --- EC2 Deployment ---
      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}

            echo "üöÄ Starting EC2 deployment..."

            # --- System setup ---
            echo "üîß Installing required dependencies..."
            sudo apt-get update -y
            sudo apt-get install -y python3 python3-venv python3-pip git docker.io

            # --- Clone or update repo ---
            if [ ! -d "/home/ubuntu/Flask-App-GitHub-Actions-ArgoCD" ]; then
              cd /home/ubuntu
              git clone https://github.com/kishoreuppathala5283/Flask-App-GitHub-Actions-ArgoCD.git
            fi

            cd /home/ubuntu/Flask-App-GitHub-Actions-ArgoCD

            echo "üîÑ Syncing with latest GitHub code..."
            git fetch origin
            git reset --hard origin/main

            # --- Python Virtual Environment ---
            echo "üêç Setting up Python virtual environment..."
            rm -rf venv
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # --- Docker Deployment ---
            echo "üîê Logging in to ECR..."
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "üõë Stopping old container (if any)..."
            if [ "$(sudo docker ps -q -f name=flaskapp)" ]; then
              sudo docker stop flaskapp
              sudo docker rm flaskapp
            fi

            echo "üì¶ Pulling latest image from ECR..."
            sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "üöÄ Starting new container..."
            sudo docker run -d \
              --name flaskapp \
              -p 5000:5000 \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            # --- Optional health check ---
            echo "üîç Verifying Flask app is running..."
            sleep 5
            if curl -s http://localhost:5000 | grep -q "Flask"; then
              echo "‚úÖ Flask app is running successfully!"
            else
              echo "‚ùå Flask app failed to start."
              exit 1
            fi

            echo "üéâ Deployment completed successfully!"
